name: Continuous Integration on Master
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
env:
  SOURCE_ARTIFACT: source
jobs:
  create-source-distribution:
    name: Create Source Distribution
    runs-on: ubuntu-18.04
    env:
      ARTIFACT_DIR: source
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Required Packages
      run: |
        sudo apt update -y
        sudo apt upgrade -y
        sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git -y
        sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler -y
        
        sudo apt-get install software-properties-common -y
        sudo add-apt-repository ppa:bitcoin/bitcoin -y
        sudo apt-get update -y
        sudo apt-get install libdb4.8-dev libdb4.8++-dev -y
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev -y
        sudo apt-get install libzmq3-dev -y
        sudo apt-get install libminiupnpc-dev -y
        sudo apt-get install libgmp3-dev libevent-dev bsdmainutils libboost-all-dev openssl -y
        
        # Install libtool    
        sudo apt-get install libtool -y
        
        # Install Libcurl
        sudo apt-get install libcurl4-openssl-dev -y
        
        # Install openssl
        apt-get install openssl -y
        sudo apt-get install -y autoconf g++ make openssl libssl-dev libcurl4-openssl-dev -y
        sudo apt-get install -y libcurl4-openssl-dev pkg-config -y
        sudo apt-get install -y libsasl2-dev -y
    - name: Create Distribution Tarball
      run: |
        ./autogen.sh
        ./autogen.sh
        ./configure --with-incompatible-bdb --with-libressl --with-unsupported-ssl
        make dist
    - name: Download Dependencies
      run: make -C depends download
    - name: Create Dependencies Tarball
      run: tar -czf depends.tar.gz depends
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv depends.tar.gz lyra-*.tar.gz $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
        path: ${{ env.ARTIFACT_DIR }}
  build-linux:
    name: Build for Linux
    needs: create-source-distribution
    runs-on: ubuntu-18.04
    env:
      ARTIFACT_DIR: linux-binaries
      TEST_LOG_ARTIFACT_DIR: test-logs
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf lyra-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Install Required Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-zmq
    - name: Build Dependencies
      run: make -C depends -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Lyra
      run: |
        ./configure --disable-jni --enable-elysium --enable-tests --with-comparison-tool=no --prefix=$(realpath depends/x86_64-pc-linux-gnu)
        make -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Run Unit Tests
      run: make check
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Run RPC Tests
      env:
        TIMEOUT: 600
      run: qa/pull-tester/rpc-tests.py -extended
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{lyra-cli,lyra-tx,lyrad,qt/lyra-qt} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: linux-binaries
        path: ${{ env.ARTIFACT_DIR }}
    - name: Prepare Test Logs for Artifact
      if: failure()
      run: |
        tor_log=$SOURCE_ARTIFACT/src/tor/test-suite.log
        lyra_log=$SOURCE_ARTIFACT/src/test-suite.log

        mkdir -p $TEST_LOG_ARTIFACT_DIR

        if test -f $tor_log; then
          mv $tor_log $TEST_LOG_ARTIFACT_DIR/tor.log
        fi

        if test -f $lyra_log; then
          mv $lyra_log $TEST_LOG_ARTIFACT_DIR/lyra.log
        fi
    - name: Upload Test Logs Artifact
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: test-logs
        path: ${{ env.TEST_LOG_ARTIFACT_DIR }}
  build-windows:
    name: Build for Windows
    needs: create-source-distribution
    runs-on: ubuntu-18.04
    env:
      ARTIFACT_DIR: windows-binaries
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf lyra-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Install Required Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
    - name: Switch MinGW GCC and G++ to POSIX Threading
      run: |
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - name: Build Dependencies
      run: make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Lyra
      run: |
        ./configure --disable-jni --enable-elysium --prefix=$(realpath depends/x86_64-w64-mingw32)
        make -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{lyra-cli.exe,lyra-tx.exe,lyrad.exe,qt/lyra-qt.exe} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: windows-binaries
        path: ${{ env.ARTIFACT_DIR }}
  build-mac:
    name: Build for macOS
    needs: create-source-distribution
    runs-on: macos-10.15
    env:
      ARTIFACT_DIR: mac-binaries
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf lyra-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Use Xcode instead of Command Line Tools
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
    - name: Install Required Packages
      run: brew install automake coreutils pkg-config
    - name: Build Dependencies
      run: make -C depends -j$(sysctl -n hw.activecpu)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Lyra
      run: |
        ./configure --disable-jni --enable-elysium --prefix=$(grealpath depends/x86_64-apple-darwin*)
        make -j$(sysctl -n hw.activecpu)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{lyra-cli,lyra-tx,lyrad,qt/lyra-qt} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: mac-binaries
        path: ${{ env.ARTIFACT_DIR }}
